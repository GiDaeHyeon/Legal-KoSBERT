import torchimport torch.nn as nnimport torch.optim as optimimport pytorch_lightning as plfrom .model import KoSBERTclass KoSBertTrainModule(pl.LightningModule):    def __init__(self,                 sbert: nn.Module = KoSBERT(),                 learning_rate: float = 5e-4,                 ):        super(KoSBertTrainModule, self).__init__()        # TODO STS Dataset Cosine Similarity Regression Training        self.sbert = sbert        self.learning_rate = learning_rate        self.loss_fn = nn.TripletMarginLoss()    def configure_optimizers(self):        optimizer = optim.AdamW(lr=self.learning_rate,                                params=self.sbert.parameters())        return [optimizer]    def forward(self,                input_ids: torch.Tensor,                attention_mask: torch.Tensor,                token_type_ids: torch.Tensor) -> torch.Tensor:        return self.sbert(input_ids=input_ids,                          attention_mask=attention_mask,                          token_type_ids=token_type_ids)    def training_step(self, batch, batch_idx):        embeddings = [b for b in batch]        loss = self.loss_fn(embeddings)        self.log('train_loss', loss, on_step=True, on_epoch=True)        return {'loss': loss}    def validation_step(self, batch, batch_idx):        embeddings = [b for b in batch]        loss = self.loss_fn(embeddings)        self.log('validation_loss', loss, on_step=False, on_epoch=True)